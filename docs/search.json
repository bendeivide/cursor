{
  "articles": [
    {
      "path": "nintermediario.html",
      "title": "Programação em R (Nível Intermediário)",
      "description": "Esse módulo terá o objetivo de detalhar o ambiente R, caracterizando melhor a sua linguagem, aprofundando **manipulações de objetos**, **cópias de objetos**, bem como **ambientes**. Falaremos sobre a criação de gráficos e **documentações em R**. Complementaremos também, sobre assuntos mais aprofundados como **programação funcional**, **programação orientada a objetos**, **metaprogramação** e uma introdução sobre **desenvolvimento de pacotes**. Por fim, ainda apresenderemos a desenvolver **gráficos**, e **banco de dados**.\n",
      "author": [],
      "contents": "\r\nSumário\r\n Caracterizando melhor o ambiente R       \r\n Programação orientada a objetos\r\nClasses e métodos\r\n…\r\n\r\n Entendendo um pouco mais sobre objetos no R\r\nManipulações com objetos\r\nSubconjuntos\r\nCópias de objetos\r\nManipulando strings (caracteres)\r\nObjeto tibble\r\nObjeto raw\r\n\r\n Aprofundamento sobre ambientes\r\n Programação Funcional\r\nOperadores binários\r\nSintaxe da família de Pacotes Tidyverse\r\nEvitando loops\r\nFunções recursivas \r\nProgramação defensiva\r\nControle de fluxos usando paralelização\r\n\r\n Banco de dados\r\n Gráficos\r\n Projetos no RStudio\r\n Projetos R no GitHub\r\n Introdução a desenvolvimento de pacotes\r\n Criação de documentações no R\r\nDocumentos Web\r\nPáginas estatísticas\r\nPáginas dinâmicas\r\n\r\nDocumentações de pacotes\r\nDocumentações de ajuda .Rd\r\nPágina Web de pacotes\r\n\r\nLivros\r\nBlogs e websites\r\nRelatórios\r\nRelatórios animados\r\nRelatórios dinâmicos\r\n\r\nDemais documentos (PDF, WORD, EPUB)\r\n\r\n\r\n Materiais para este módulo\r\nSlides de Aulas\r\nAula 26: Apresentação do Curso\r\nAula 27: Revisão de como o R trabalha\r\nScripts\r\nScript 00:\r\nScripts via Shiny\r\nCurso R via Shiny\r\n Apresentação do curso\r\nO Curso R será todo aprensentado no formato online, sendo que as aulas terão vídeos como suporte, postados no canal Youtube/Ben Dêivide divulgados ao longo do material. Os vídeos serão bem objetivos de curta duração para que usem como suporte com o material escrito. Como complemento desse material, disponibilizaremos os scripts com os comandos utilizados em cada aula e sua versão em Shiny para os que não quiserem realizar inicialmente a instalação do R e do RStudio, poderão utilizar uma versão online do material juntamente com a linguagem R.\r\n Caracterizando melhor o ambiente R\r\nAo estudarmos o módulo básico do Curso R, conseguimos obter uma visão geral sobre o ambiente R, de modo que o aprofundamento sobre a linguagem se faz necessário, para quem deseja não apenas executar rotinas prontas, mas de fato, um contribuidor para a linguagem, como também um desenvolvedor de suas próprias funções.\r\nNa Figura 1, apresentamos um resumo do que buscamos repassar no primeiro módulo. Agora, iremos no módulo intermediário, de fato, entender os dois princípios: Objeto e Função, para que fique claro que nem tudo no R é orientado a objetos, e que a rigor o R não é uma linguagem de programação funcional. Com essas informações, dentre outras, o programador poderá ter um maior controle sobre o desenvolvimento de suas próprias rotinas e funções.\r\n\r\n\r\n\r\nFigure 1: Relembrando como o R funciona.\r\n\r\n\r\n\r\nVamos inicialmente caracterizar melhor o R. Por que usamos os termos linguagem, software ou ambiente para o R? Na página do R, na seção about se inicia com a primeira pergunta: O que é o R? Em resposta da própria página e utilizando também como resposta a nossa indagação inicial, o “R é uma linguagem e ambiente para computação estatística e gráficos,” que ainda complementa que essa linguagem é uma implementação diferente da linguagem S, linguagem essa do qual inclui as principais implementações para análise estatística. Contudo, ocorrem algumas diferenças dentre as quais já apresentamos no módulo básico, a presença do escopo léxico no R, que não ocorre na linguagem S. Desse modo, percebemos que o R é uma linguagem interpretada, pois além da linguagem S (o que fácil para os usuários a implementação do código), a sua base foi programada em C e FORTRAN (para computação mais intensiva). Mas também, adjetivamos o R como ambiente de software ao invés de apenas software, e aqui predominaremos esse termo, pois segundo ainda na própia página se “pretende caracterizá-lo como um sistema totalmente planejado e coerente, ao invés de um acréscimo incremental de ferramentas muito específicas e inflexíveis, como é frequentemente o caso com outros softwares de análise de dados.” Assim, esse ambiente inclui:\r\nmanipulação de dados;\r\noperações com matrizes;\r\ncoleção de ferramentas para análise de dados;\r\ncriação e apresentações gráficas, para apresentação dos dados;\r\nlinguagem que inclui condicionais, fluxos de controle, funções recursivas definidas pelo usuário e recursos de entrada e saída;\r\nDocumentação e relatórios de análises.\r\nExistem linguagens como C e FORTRAN, por exemplo, que a execução do código nessas linguagem precisam de uma compilação, para depois serem executadas, isto é, as linhas de códigos programadas pelo usuário precisam ser convertidas na linguagem de máquina, para que depois seja executa. Porém, no R, quando escrevemos uma linha de comando no console, do tipo:\r\n\r\n\r\n(x <- 10)\r\n\r\n\r\n[1] 10\r\n\r\nPercebemos no R o código é automaticamente interpretado conforme o usuário executa. Desse modo, caracterizamos a linguagem de programação dinâmica.\r\nA ideia do R como uma linguagem de programação com estilo funcional, se deve pelo fato da linguagem ter funções de primeira classe, function(), isto é, funções que se comportam como qualquer outro objeto no ambiente R. Por exemplo, podemos atribuir nomes as nossas funções, armazená-las em listas, serem criadas dentro de outras funções, serem argumentos de outras funções, ou até ser um resultado de uma função. Mas o R não é estritamente funcional. A definição de programação funcional apresenta algumas características, dentre elas, que a linguagem apresente:\r\nComposição de funções;\r\nFunções puras;\r\nImutabilidade;\r\nEfeito colateral;\r\nA ideia da composição de funções representa a criação de funções por meio de outras funções, e isso está dentro da linguagem R. Por exemplo, vamos criar uma função que calcula a média de um conjunto de dados, usando a função, mean(), já existente no pacote base, isto é,\r\n\r\n\r\nx <- 1:10\r\nmedia <- function(x) mean(x)\r\nmedia(x)\r\n\r\n\r\n[1] 5.5\r\n\r\nA caracterização de funções puras, significa que as funções sempre retornam o mesmo resultado, dados os mesmos parâmetros de entrada, isto significa que não existe efeito colateral. Um exemplo de função pura, pode ser como:\r\n\r\n\r\nfpura <- function(x) x + 1\r\nfpura(x = 2)\r\n\r\n\r\n[1] 3\r\n\r\nObserve que fpura() toda vez que a entrada for x = 2, o resultado sempre será o resultado 3. Porém, o R se exclui dessa característica estritamente funcional, quando aprensentamos funções: runif(), rnorm(), read.csv(), dentre outras. Por exemplo, a função rnorm() representa um gerador de números aleatórios de uma distribuição normal, do qual se executarmos essa função, mais de uma vez, usando a mesma entrada para o argumento n = 3, o resultado não será sempre o mesmo, observe:\r\n\r\n\r\nrnorm(n = 3)\r\n\r\n\r\n[1] -0.8392173 -0.4904678 -0.9694487\r\n\r\nrnorm(n = 3)\r\n\r\n\r\n[1]  0.2716462  1.3663770 -0.3333555\r\n\r\nA imutabilidade na programação funcional apresenta em uma linguagem na situação em que uma variável ou objeto é criado, e este não pode ser modificado. Esta é outra característica que ocorre no R, mas não para todos os objetos em que exitem nomes associados, é o caso da modificação no local. Por exemplo, vamos apresentar um contra-exemplo de que nem todos os objetos no R são imutáveis. Vejamos:\r\n\r\n\r\n# Criamos um vetor e associamos ao nome 'x'\r\nx <- c(1, 2, 3)\r\n# Vejamos o identificador de memória\r\nlobstr::obj_addr(x)\r\n# > \"0xcf09be4708\"\r\n# Modificando no local\r\nx[2] <- 4; x\r\n# [1] 1 4 3\r\n# Mesmo modificando o objeto, o identificador eh o mesmo\r\nlobstr::obj_addr(x)\r\n# > \"0xcf09be4708\"\r\n\r\n\r\n\r\nPara a execução dessas linhas de comando, sugerimos que não utilizem diretamente o RStudio, porque a IDE sempre faz uma referência a cada objeto. Sugerimos que utilize a própria interface do R. Esse tema será aprodundado mais a frente, na seção entendendo um pouco mais sobre objetos.\r\nO R não é uma linguagem totalmente orientada a objetos, como afirmado por alguns. Apesar, de um dos princípios do R que tudo é um objeto, não significa dizer que tudo é orientado a objetos. Isso se deve ao fato de que os primeiro objetos criados no R, que chamaremos de objetos base, foram desenvolvidos baseados na linguagem S. E nesse tempo não havia qualquer cogitação de que fosse necessário um sistema de programação orientada a objetos (POO). Veremos mais a frente, que a distinção básica entre objetos base e objetos baseados em sistemas orientados a objetos, chamaremos de objetos OO, é que estes últimos terão o atributo class, do qual podemos consultá-lo pela função attr(). Vejamos, alguns exemplos:\r\n\r\n\r\n# Objetos OO\r\nattr(ggplot2::diamonds, \"class\")\r\n\r\n\r\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\r\n\r\n# Objetos base\r\nattr(1:10, \"class\")\r\n\r\n\r\nNULL\r\n\r\nQuando não há o atributo class, isto é, NULL, é objeto base. Contudo, iremos na seção Programação orientada a objetos saber em que sistemas esses objetos estão orientados, porque no R, diferentemente de outras linguagens, existem vários sistemas POO, como: S3, S4 e R6.\r\nPor fim, como última caracterização do R abordada é como uma linguagem de programação metaparadigma ocorre porque pela própria linguagem, poderemos inspecioná-la, modificá-la, por ela mesma, como se fosse um objeto, o que acaba tornando uma ferramenta muito poderosa. E isso será tema abordado mais a frente.\r\nPortanto, esclarecido isso, e ainda com as demais características apresentadas no módulo básico, dizemos que o R é:\r\num ambiente de software livre e código aberto, com licença GNU;\r\numalinguagem de programação interpretada;\r\nde escopo lêxico;\r\numa linguagem de programação dinâmica;\r\numa linguagem de programação funcional;\r\numa linguagem de programação orientada a objetos; e\r\numa linguagem de programação metaparadigma.\r\n Programação orientada a objetos\r\nAssim como no nosso dia a dia podemos realizar uma mesma tarefa de modos diferentes, isso ocorre também na programação. Nesse caso, dizemos que esses modos são os paradigmas da programação. E a programação orientada a objetos (POO) é um desses paradigmas que veio para contornar alguns problemas da programação estrutural, um outro paradigma.\r\nAntes de apresentarmos outras diferenças entre os objetos base e objetos OO, se faz necessário entendermos alguns conceitos da POO, do qual tudo se desencadeará pelos termos classe, objeto e método. Para isso, vamos ilustrar alguns termos baseados no nosso cotidiano. Uma das grandes cobiças nessa era digital é ter um bom smartphone para que possamos estar conectados nessa era digital, bem não sei se foi bem esse objetivo do smartphone, mas consideremos que tenha sido. Essa escolha se deve a algumas características tamanho, cor, desempenho, câmera, dentre outras. Mesmo que seu aparelho apresente um IMEI (Código de identificação do aparelho) único\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n–>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nProjetos no RStudio\r\nProjetos R no Github\r\nEntendendo um pouco mais sobre objetos\r\nManipulando vetores de modo character\r\npacote tidytext\r\n\r\n\r\nObjetos modo raw\r\nObjetos modo complex\r\nOutro tipo de estrutura de dados tibble\r\n\r\nManipulações com objetos\r\nCópias de objetos\r\nProgramação orientada a objetos\r\nClasses e Métodos\r\nProgramação funcional\r\nFunção operadores binários ou unirios\r\npacote magritt -> %>% (pipe - lê-se paipe)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nEvitando loops\r\nFunções recursivas\r\nProgramação defensiva\r\nFunção stop()\r\nFunção Warning\r\nControle de fluxos usando paralelização\r\n\r\n\r\nGráficos\r\n\r\n\r\n\r\n\r\n\r\n\r\nIntrodução a desenvolvimento de pacotes\r\nAmbientes\r\nBanco de dados e APIs, SQL\r\nCriação de documentações no R\r\nDocumentos Web (estatística e dinâmica)\r\nPáginas de pacote (pkgdown)\r\nLivros (bookdown)\r\nBlogs e websites (distill, blogdown)\r\nDocumentos (PDF, WORD, EPUB)\r\nDocumentos estatísticos\r\nDocumentos animados\r\nRelatórios dinâmicos\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-23T14:54:42-03:00"
    }
  ],
  "collections": []
}
