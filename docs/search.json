{
  "articles": [
    {
      "path": "index.html",
      "title": "Curso R",
      "description": "Aprecie todo o material contido nesse site, como se fosse seu. Zele, propague, critique, contribua. Será um prazer compartilharmos nossas experiências e experienciarmos juntos esse conhecimento! \n",
      "author": [],
      "contents": "\r\n\r\nSumário\r\n Sobre o autor\r\n Proposta do curso\r\nProgramação em R (Nível Básico)\r\nProgramação em R (Nível Intermediário)\r\nProgramação em R (Nível Avançado)\r\nReferências do curso\r\nOnde encontrar nossos materiais\r\nPacotes R utilizados para esse curso\r\n\r\n Instalação do R e do RStudio\r\nSO Windows\r\nSO Linux (Ubuntu)\r\nSO MAC\r\n\r\n\r\n Sobre o autor \r\nNatural da cidade de Pau dos Ferros/RN. Formado em Engenharia Agronômica pela Universidade Federal Rural do Semiárido (UFERSA), Mossoró/RN. Pós-Graduação (Mestrado e Doutorado) e Pós-Doutorado em Estatística e Experimentação Agropecuária pela Universidade Federal de Lavras (UFLA), Lavras/MG. Atualmente estou como Professor de Estatística pela Universidade de São João Del-Rei (UFSJ), campus Alto Paraopeba, Ouro Branco/MG. Minhas linhas de pesquisas se concentram em Estatística e Probabilidade, Estatística Experimental, Estatística Computacional (linguagem R), densenvolvimento de pacotes R para análises de dados e ensino da Estatística. Mais detalhes, acesse minha página.\r\nA motivação para estudar a linguagem R se deve a algumas fases experienciadas na vida acadêmica. A primeira foi a paixão pela Estatística. Estando no terceiro período do curso de Agronomia (UFERSA), concorri a tão sonhada monitoria de Estatística, orientada pelo Prof. Janilson Pinheiro de Assis (UFERSA). Nessa fase houve muitas conversas e conselhos para seguir em uma pós-graduação na área da Estatística. Se tornou amor quando fui impulsionado pelas leituras de apostilas e o encanto por um programa estatístico chamado SISVAR, do Prof. Daniel Furtado Ferreira (UFLA), Figura 1. Isso resultou em todo amadurecimento profissional durante o mestrado e doutorado sob a orientação do Prof. Daniel, e até hoje, estamos em constante processo de desenvolvimento de pesquisa, com o objetivo de propagar conhecimento.\r\n\r\n\r\n\r\nFigure 1: Daniel Furtado na Serra da Bocaina (Lavras/MG).1\r\n\r\n\r\n\r\nAinda durante a graduação, além de conhecer os materiais de Estatística do Professor Daniel, comecei a ler os materiais introdutórios em R, que costumeiramente, ele postava em sua página institucional. Mas o passo inicial para me guiar ao estudo do R, foi idealizado por uma apostila do Professor Paulo Justiniano Ribeiro Júnior (UFPR), intitulada Introdução ao Ambiente Estatístico R. As primeiras leituras desse material, me trouxe um bom conhecimento inicial, sobre a linguagem R, ao mestrado na UFLA.\r\nTudo isso me levou a essa outra grande paixão hoje que é estudar essa linguagem. Com o apoio inicial do Prof. Daniel Furtado, durante a pós-graduação, e agora na UFSJ, com os alunos que trabalham comigo de iniciação científica, juntos com mais alguns outros parceiros de estrada, chegamos a publicação de alguns pacotes R sob o CRAN, segue em ordem de publicação, SMR, midrangeMCP, TVMM, cppcor, MCPtests. Para projetos futuros, temos os pacotes statscience, meupacoter, leem (Laboratório de Ensino à Estatística e Matemática) dentre outros ainda não disponíveis.\r\n\r\n Proposta do curso \r\nO curso R não tem como objetivo principal de ensinar análise de dados. Mas sim, proporcionar a você um conhecimento sobre a linguagem R, de modo que consiga usufruir todos os recursos que ela possa lhe proporcionar.\r\nAinda como complemento, não queremos nesse material, convencê-lo a utilizar a linguagem R, pois a melhor linguagem é aquela que você domina. Contudo, pretendemos lhe mostrar que os recursos utilizados pelo R não estão mais limitados a própria análise de dados. Um exemplo é esse material, que nesse momento usufruo do R para repassar as minhas experiências sem ao menos ter o domínio sobre linguagens do tipo HTML, CSS, JavaScript, dentre outras, necessárias para uma boa criação de página web.\r\nDessa forma, propormos um entendimento sobre a sintaxe e semântica de como a linguagem R é desenvolvida. Com isso, você será capaz após esse curso, estudar um pouco mais sobre essa ciência que nos últimos anos vem ganhando mais evidência, que é a Estatística. Tudo isso devido ao grande volume de informações obtidos nessa era tecnológica. Juntamente com ela, o R se tornará uma poderosa ferramenta com o qual você poderá entender os padrões que estão por trás dos dados, que por sinal, é a moeda valiosa do momento, ou melhor, sempre foi!\r\nMas não só apenas análise de dados, aprenderemos também recursos diversos na área da computação, como programação defensiva, desenvolvimento de interfaces gráficas, paralelização. Ensinaremos também o desenvolvimento de materiais como artigos, livros, websites, blogs, dashboards. Por fim, chegaremos a maior cobiça de um programador R, desenvolver seu próprio pacote R.\r\n\r\n\r\n Repararam que em muitos momentos utilizamos o artigo “o” para a linguagem R. Pois é, isso ocorre porque ela também é considerada um software. Daí, também podemos chamá-la de software R, ou preferivelmente, ambiente R. \r\n\r\n\r\nO material curso R apresentará três módulos:\r\nProgramação em R (Nível Básico)\r\nProgramação em R (Nível Intermediário)\r\nProgramação em R (Nível Avançado)\r\nA seguir, explanaremos sobre cada um dos módulos.\r\nProgramação em R (Nível Básico)\r\nO primeiro módulo compreenderá um breve histórico sobre a linguagem, o conhecimento da sintaxe e semântica da linguagem R, compreendendo as estruturas bases da linguagem, sobre o que é um objeto e como construir uma função, o entendimento sobre fluxos de controle. O que é um pacote, carregar e anexar um pacote, e quem são as pessoas que fazem parte da manutenção dessa linguagem, também serão assuntos desse primeiro módulo. Caminhos de busca, ambientes e namespaces, teremos noções básicas. Algo muito interessante, que pode mudar a sua vida como programação em R são as boas práticas para a escrita de um código R, tema também abordado nesse módulo.\r\nPara acessar o material, segue: Programação em R (Nível Básico).\r\nProgramação em R (Nível Intermediário)\r\nEm contrução…\r\nProgramação em R (Nível Avançado)\r\nEm contrução…\r\nReferências dos curso\r\nCitaremos alguns livros e materiais utilizados para o desenvolvimento desse curso, tais como:\r\nAn introduction to R\r\nAn Introduction to R\r\nR Language Definition\r\nR Internals\r\nAdvanced R (Wickham 2019)\r\nAdvanced R Solutions (Grosser, Buman, and Wickham 2021)\r\nR Packages (Wickham 2015)\r\nExtending R (Chambers 2016)\r\nSoftware for Data Analysis: Programming with R (Chambers 2008)\r\nR in a Nutshell (Adler 2012)\r\nOnde encontrar os nossos materiais\r\nTemos dedicado uma parte do nosso trabalho no desenvolvimento de materiais em R, dos quais podem ser encontrados em: Ciencia e Progresso, Github e página pessoal.\r\nPacotes R utilizados para esse curso\r\nSegue uma lista dos pacotes utilizados para o desenvolvimento do material desse curso:\r\nPacote\r\nObjetivo para o curso\r\nlobstr\r\nAuxilia no estudo sobre a sintaxe do pacote\r\ncodetools\r\nAuxilia no estudo sobre a sintaxe do pacote\r\nXR\r\nAuxilia no estudo sobre a sintaxe do pacote\r\nrlang\r\nAuxilia no estudo sobre a sintaxe do pacote\r\nsloop\r\nAuxilia a compreender interativamente a programação orientada a objetos\r\ndistill\r\nCriação da página\r\n Instalação do R e do RStudio\r\nA seguir, apresentaremos as subseções para a instalação da linguagem R e do RStudio. Em todo nosso curso utilizaremos o sistema operacional Windows. Contudo, se esse não é o seu sistema operacinal, não haverá problema no entendimento sobre o R. Assim, convencionaremos a todos a utilização do RStudio, uma vez que poderá ser instalado nas principais plataformas de sistema operacional.\r\nSO Windows\r\nPara a instalação do R e do RStudio, como também do rtools, convidaremos para a seção Instalação do R e do RStudio do primeiro módulo desse curso, que é Programação em R (nível básico).\r\n\r\n\r\nSO Linux (Ubuntu)\r\nUm vídeo produzido pelo nosso canal do Youtube/Ben Dêivide, mostra falcilmente como realizar a instalação do R e o RStudio pelo Linux: \r\nUma outra opção pode ser um vídeo produzido pelo Canal PPGC UFSC (Youtube), mostra falcilmente como realizar a instalação do R e o RStudio pelo Linux: \r\nSO MAC\r\nUm vídeo produzido pelo Canal PPGC UFSC (Youtube), mostra falcilmente como realizar a instalação do R e o RStudio pelo MAC:\r\n\r\n\r\n\r\n\r\n\r\nAdler, Joseph. 2012. R in a Nutshell. Sebastopol: O’Reilly Media.\r\n\r\n\r\nChambers, John M. 2008. Extending R. Statistics and Computing. New York: Springer.\r\n\r\n\r\n———. 2016. Extending R. The R Series. Boca Raton, Florida: Chapman; Hall/CRC.\r\n\r\n\r\nGrosser, Malte, Henning Buman, and Hadley Wickham. 2021. Advanced R Solutions. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://adv-r.hadley.nz/.\r\n\r\n\r\nWickham, Hadley. 2015. R Packages. 2nd ed. O’Reilly Media. https://r-pkgs.org/index.html.\r\n\r\n\r\n———. 2019. Advanced R. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://adv-r.hadley.nz/.\r\n\r\n\r\n———. 2019. Advanced R. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://adv-r.hadley.nz/.\r\n\r\n\r\nFonte das fotos: Acervo pessoal de Daniel Furtado↩︎\r\n",
      "last_modified": "2021-02-24T05:32:49-03:00"
    },
    {
      "path": "nbasico.html",
      "title": "Programação em R (Nível Básico)",
      "description": "Esse módulo terá o objetivo de apresentar de forma introdutória a **sintaxe** e **semântica** da linguagem `R`, enfatizando definições importantíssimas para a linguagem como **objeto**, **função** e **pacote**, como também outras definições\n",
      "author": [],
      "contents": "\r\nSumário\r\n Materiais para este módulo\r\nSlides de Aulas\r\nScripts\r\nScripts via Shiny\r\n\r\n Apresentação do curso\r\n Instalação do R e RStudio para o SO Windows\r\n Como utilizar o R e o RStudio\r\n História do R\r\n Como o R trabalha\r\n Comandos no R e Ambiente Global\r\n Arquivos .Rdata e .Rhistory\r\n Criando e salvando um script\r\n Objetos\r\n\r\n Materiais para este módulo\r\nSlides de Aulas\r\nAula 00: Apresentação do Curso\r\nAula 01: Instalação do R e do RStudio\r\nAula 02: Passos iniciais para a utilização do R e do RStudio\r\nAula 03: História do R\r\nAula 04: Como o R trabalha\r\nAula 05: Comandos no R e Ambiente Global\r\nAula 06: Arquivos .RData e .Rhistory\r\nAula 07: Criando e salvando um Script\r\nAula 08: Objetos\r\nAula 09: Aritmética e Operadores lógicos\r\nAula 09: Vetores\r\nAula 10: Matrizes\r\nAula 11: Arrays\r\nAula 12: Data frames\r\nAula 13: Lists\r\nAula 14: Importando/Exportando dados\r\nAula 15: Funções\r\nAula 16: ~\r\nAula 17: Boas práticas de como escrever um código\r\nAula 17: Como criar funções\r\nAula 18: Controle de fluxos (Loops)\r\nAula 19: Pacotes\r\nAula 20: Carregando e Anexando pacotes\r\nAula 21: Quando devemos utilizar os operadores :: e :::\r\nAula 22: Namespace de um pacote\r\nAula 23: Ambientes e Caminhos de busca\r\nAula 24: Interface com outras linguagens\r\nAula 25: Considerações e Preparação para a Programação em R (Nível Intermediário)\r\nScripts\r\nScript 00: ~\r\nScript 01: ~\r\nScript 02: ~\r\nScript 03: Escopo léxico\r\nScript 04: ~\r\nScript 05: Comandos\r\nScript 06: ~\r\nScript 07: ~\r\nScript 08:\r\nScript 09:\r\nScript 10:\r\nScripts via Shiny\r\nCurso R via Shiny\r\n Apresentação do curso\r\n\r\n\r\nO Curso R será todo aprensentado no formato online, sendo que as aulas terão vídeos como suporte, postados no canal Youtube/Ben Dêivide divulgados ao longo do material. Os vídeos serão bem objetivos de curta duração para que usem como suporte com o material escrito. Como complemento desse material, disponibilizaremos os scripts com os comandos utilizados em cada aula e sua versão em Shiny para os que não quiserem realizar inicialmente a instalação do R e do RStudio, poderão utilizar uma versão online do material juntamente com a linguagem R.\r\n\r\n\r\n Instalação do R e RStudio para o SO Windows\r\n\r\n\r\nA linguagem R é o objetivo principal desse curso. Assim, faremos inicialmente a sua instalação, uma vez que o RStudio é apenas uma GUI, e sem o R, não há sentido instalá-lo.\r\nDessa forma, seguem os passos para a instalação:\r\nInstalação do R: https://cran.r-project.org/bin/windows/base/\r\nInstalação do RStudio: https://rstudio.com/products/rstudio/download/#download\r\nJustificamos a utilizamos do RStudio, pela quantidade de recursos disponíveis e a diversidade de usuários R, que hoje o perfil não é apenas de um programador, mas um usuário que necessita de uma ferramenta estatística para análise de seus dados. Dessa forma, até por questão de praticidade, e de uso pessoal, não deixaremos de repassar o entendimento sobre a linguagem R com o uso do RStudio.\r\n Como utilizar o R e o RStudio\r\n\r\n\r\nA primeira ideia que temos sobre a linguagem R é a linha de comando no R, que é simbolizada pelo prompt de comando “>.” Este símbolo significa que o R está pronto para receber os comandos do usuário. O prompt de comando está localizado no console do R. Vejamos o console do R a seguir, que é o local que recebe as linhas de comando do usuário.\r\n\r\n\r\n\r\nFigure 1: Console do R (Versão 4.0.3).\r\n\r\n\r\n\r\nO R ao ser iniciado está pronto para ser inserido as linhas de comando desejadas. Uma forma simples de armazernar os seus comandos é por meio de um script, isto é, um arquivo de texto com extensão .R. Para criar basta ir em: Arquivo > Novo script.... Muitas outras informações iremos ver ao longo do curso.\r\nO RStudio se apresenta como uma interface para facilitar a utilização do R, tendo por padrão quatro quadrantes, apresentados na Figura 2.\r\n\r\n\r\n\r\nFigure 2: Interface do RStudio (Versão 1.4.1103).\r\n\r\n\r\n\r\nMuitas coisas na interface do R podem se tornar problemas para os usuários, uma vez que janelas gráficas, janelas de scripts, dentre outras, se sobrepõe. Uma vantagem no RStudio foi essa divisão de quadrantes, que torna muito mais organizado as atividades realizadas no R. De um modo geral, diremos que o primeiro quadrante é responsável pela entrada de dados, comandos, isto é, o input. O segundo quadrante, que é o console do R, representa tanto entrada como saída de informações (input/output). Dependendo as atividades as abas podem aumentar. O terceiro quadrante representa informações básicas como objetos no ambiente global, a memória de comandos na aba History, dentre outras, e também representa entrada como saída de informações (input/output). Por fim, o quarto quadrante é responsável por representação gráficas, instalação de pacotes, renderização de páginas web.\r\n História do R\r\n\r\n\r\nA linguagem R tem a sua primeira aparição científica publicada em 1996, com o artigo intitulado R: A Language for Data Analysis and Graphics, cujos os autores são os desenvolvedores da linguagem, George Ross Ihaka e Robert Clifford Gentleman.\r\n\r\n\r\n\r\nFigure 3: Criadores do R.1\r\n\r\n\r\n\r\nDurante a época em que estes professores trabalhavam na Universidade de Auckland, Nova Zelândia, desenvolvendo uma implementação alternativa da lingugagem S, desenvolvida por John Chambers, que comercialmente era o S-PLUS, nasceu em 1991, o projeto da linguagem R, em que em 1993 o projeto é divulgado e em 1995, o primeiro lançamento oficial, como software livre com a licença GNU. Devido a demanda de correções da linguagem estava acima da capacidade de atualização em tempo real, foi criado em 1997, um grupo central voluntário, responsável por essas atualizações, o conhecido R Development Core Team2, que hoje está em 20 membros: Douglas Bates, John Chambers, Peter Delgaard, Robert Gentleman, Kurt Hornik, Ross Ihaka, Tomas kalibera, Michael Lawrence, Friedrich Leish, Uwe Ligges, Thomas Lumley, Martin Maechler, Martin Morgan, Paul Murrel, Martyn Plummer, Brian Ripley, Deepayan Sarkarm, Duncan Temple Lang, Luke Tierney e Simon Urbanek.\r\nPor fim, o CRAN (Comprehensive R Archive Network) foi oficialmente anunciado em 23 de abril de 19973. O CRAN é um conjunto de sites (espelhos) que transportam material idêntico, com as contribuições do R de uma forma geral.\r\nR é uma linguagem de programação e ambiente de software livre e código aberto (open source). Entendemos4:\r\nSoftware livre: software que respeita a liberdade e sendo de comunidade dos usuários, isto é, os usuários possuem a liberdade de executar, copiar, distribuir, estudar, mudar, melhorar o software. Ainda reforça que um software é livre se os seus usuários possuem quatro liberdades:\r\nLiberdade 0 - A liberdade de executar o programa como você desejar, para qualquer propósito;\r\nLiberdade 1 - A liberdade de estudar como o programa funciona, e adaptá-la as suas necessidades;\r\nLiberdade 2 - A liberdade de redistribuir cópias de modo que você possa ajudar outros;\r\nLiberdade 3 - A liberdade de distribuir cópias de suas versões modificadas a outros.\r\n\r\nAlgo que deve está claro é que um software livre não significa não comercial. Sem esse fim, o software livre não atingiria seus objetivos.\r\nAgora perceba que, segundo Richard Stallman5, a ideia de software livre faz campanha pela liberdade para os usuários da computação. Por outro lado, o código aberto valoriza principalmente a vantagem prática e não faz campanha por princípios.\r\nCódigo aberto: Para Richard Stallman6 código aberto apoia critérios um pouco mais flexíveis que os do software livre. Todos os códigos abertos de software livre lançados se qualificariam como código aberto. Quase todos os softwares de código aberto são software livre, mas há exceções, como algumas licenças de código aberto que são restritivas demais, de forma que elas não se qualificam como licenças livres. Nesse contexto, o autor cita muitas situações que diferenciam os dois termos. Vale a pena a leitura.\r\nA linguagem R é uma combinação da linguagem S com a semântica de escopo léxico da linguagem Scheme. Dessa forma, a linguagem R se diferencia em dois aspectos principais7:\r\nGerenciamento de memória: usando as próprias palavras de Ross Ihaka8, em R, alocamos uma quantidade fixa de memória na inicialização e a gerenciamos com um coletor de lixo dinâmico. Isso significa que há muito pouco crescimento de heap e, como resultado, há menos problemas de paginação do que os vistos em S.\r\nEscopo: na linguagem R, as funções acessam as variáveis criadas pelo no corpo da própria função, como também as variáveis contidas no ambiente que a função foi criada. No caso da linguagem S, isso não ocorre, assim, como por exemplo na linguagem C, em que as funções acessam apenas variáveis definidas globalmente.\r\nVejamos alguns exemplos para entendimento (Se você ainda não está ambientado ao R, estude esse módulo primeiro, e depois reflita sobre esses exemplos). Antes de executar as linhas de comando, instale o pacote lobstr como segue:\r\n\r\n\r\n# Instale o pacote lobstr\r\ninstall.packages(\"lobstr\")\r\n\r\n\r\n\r\nExemplo 1: As funções têm acesso ao escopo em que foram criadas.\r\n\r\n\r\n# Criando um nome \"n\" associado a um objeto 10 no escopo da funcao\r\nn <- 10\r\n\r\n# Criando um nome \"funcao\" associado a um objeto que eh uma funcao\r\nfuncao <- function() {\r\n  print(n)\r\n}\r\n\r\n# Imprimindo 'funcao'\r\nfuncao()\r\n\r\n\r\n[1] 10\r\n\r\nExemplo 2: As variáveis criadas ou alteradas dentro de uma função, permanecem na função.\r\n\r\n\r\n# Criando um nome \"n\" associado a um objeto 10 no escopo da funcao\r\nn <- 10\r\nlobstr::obj_addr(n) # Identificador do objeto\r\n\r\n\r\n[1] \"0x9fce8e8\"\r\n\r\n# Criando um nome \"funcao\" associado a um objeto que eh uma funcao\r\nfuncao <- function() {\r\n  # Imprimindo n\r\n  print(n)\r\n  # Criando um nome \"n\" associado a um objeto 15 no corpo da funcao\r\n  n <- 15\r\n  # Imprimindo n\r\n  print(n)\r\n}\r\n# Imprimindo 'funcao'\r\nfuncao()\r\n\r\n\r\n[1] 10\r\n[1] 15\r\n\r\n# Imprimindo 'n'\r\nn\r\n\r\n\r\n[1] 10\r\n\r\nlobstr::obj_addr(n) # Identificador do objeto\r\n\r\n\r\n[1] \"0x9fce8e8\"\r\n\r\nExemplo 3: As variáveis dentro de uma função permanecem nelas, exceto no caso em que a atribuição ao escopo seja explicitamente solicitada.\r\n\r\n\r\n# Criando um nome \"n\" associado a um objeto 10 no escopo da funcao\r\nn <- 10\r\nlobstr::obj_addr(n) # Identificador do objeto\r\n\r\n\r\n[1] \"0x2a5fd938\"\r\n\r\n# Criando um nome \"funcao\" associado a um objeto que eh uma funcao\r\nfuncao <- function() {\r\n  # Imprimindo n\r\n  print(n)\r\n  # Criando um nome \"n\" associado a um objeto 15 no corpo da funcao\r\n  n <<- 15\r\n  # Imprimindo n\r\n  print(n)\r\n}\r\n# Imprimindo 'funcao'\r\nfuncao()\r\n\r\n\r\n[1] 10\r\n[1] 15\r\n\r\n# Observe que depois de usar a superatribuicao (\"<<-\") dentro da funcao,\r\n#o nome \"n\" passou a estar associado ao numero 15 e nao mais ao numero 10, observe\r\nn\r\n\r\n\r\n[1] 15\r\n\r\nlobstr::obj_addr(n) # Identificador do objeto\r\n\r\n\r\n[1] \"0x2a5fd858\"\r\n\r\nExemplo 4: Por fim, embora a linguagem R tenha um escopo padrão, chamado ambiente global, os escopos de funções podem ser alterados.\r\n\r\n\r\n# Criando um nome 'n' associado a um objeto 10 no escopo da funcao (ambiente global)\r\nn <- 10\r\n# Criando um nome 'funcao' associado a um objeto que eh uma função criado no ambiete global\r\nfuncao <- function() {\r\n  # Imprimindo n\r\n  print(n)\r\n}\r\n# Imprimindo 'funcao' no ambiente global\r\nfuncao()\r\n\r\n\r\n[1] 10\r\n\r\n# Criando um novo ambiente\r\nnovo_ambiente <- new.env()\r\n# Criando um nome \"n\" associado ao objeto 20 no ambiente  'novo_ambiente'\r\nnovo_ambiente$n <- 20\r\n# Criando um objeto funcao no ambiente 'novo_ambiente'\r\nenvironment(funcao) <- novo_ambiente\r\n# Imprimindo 'funcao' no ambiente 'novo_ambiente'\r\nfuncao()\r\n\r\n\r\n[1] 20\r\n\r\nComo a linguagem S é também uma linguagem interpretada cuja base é a linguagem FORTRAN, a linguagem R também é uma linguagem interpretada e baseada além da linguagem S, tem como base as linguagens de baixo nível C e FORTRAN e a própria linguagem R.\r\nEmbora o R tenha uma interface baseada em linhas de comando, existem muitas interfaces gráficas ao usuário com destaque ao RStudio, criado por Joseph J. Allaire, Figura 4.\r\n\r\n\r\n\r\nFigure 4: J. J. Allaire, o criador do RStudio9.\r\n\r\n\r\n\r\nEssa interface tornou o R mais popular, pois além de produzir pacotes de grande utilização hoje como a família de pacotes tidyverse, rmarkdown, shiny, dentre outros, permite uma eficiente capacidade de trabalho de análise de utilização do R. Uma vez que o RStudio facilita a utilização de muitos recursos por meio de botões, como por exemplo, a criação de um pacote R, a quem diga que para um iniciante em R que não inicie a linguagem por meio dela. Cremos, que o problema não é o RStudio, e sim, o caminho onde deseja chegar com a linguagem R.\r\nNo Brasil, o primeiro espelho do CRAN foi criado na UFPR, pelo grupo do Prof. Paulo Justiniano. Inclusive um dos primeiros materiais mais completos sobre a linguagem R produzidos no Brasil, foi dele, iniciado em 2005, intitulado Introdução ao Ambiente Estatístico R. Vale a pena assistirmos o evento a palestra: R Releflões: um pouco de história e experiências com o R, proferida pelo Prof. Paulo Justiniano Ribeiro Júnior, no R Day - Encontro nacional de usuários do R, ocorrido em 2018 em Curitiba/UFPR, do qual o vídeo está disponível no Canal (Youtube) LEG UFPR.\r\n\r\n\r\nPara quem não sabe, o Prof. Paulo Justiniano (Figura 5) e sua equipe trouxeram o primeiro espelho do R para o Brasil e foi o desenvolvedor de um dos 100 primeiros pacotes submetidos ao CRAN10. Devido a sua ida para Lancaster/Inglaterra para fazer o doutorado, em 1997, se deparou com o início dos estudos sobre o R fora do país. Isso porque havia uma necessidade muito grande de um programa para ser utilizado nas plataforma UNIX. Nesse momento a linguagem S estava sendo uma saída para isso, porém, o uso de memória que a linguagem consumia nos computadores, na criação das rotinas, era muito grande (Claro que grande para aquela época!). Não satisfeito, ao voltar para o Brasil, em 2002, se depara com alguns usuários da linguagem S, porém, certo como mudança de cultura na utilização de linguagem R, passou a densevolver materiais didáticos da linguagem, para as disciplinas do departamento de Estatística (UFPR).\r\n\r\n\r\n\r\nFigure 5: Foto de divulgação de Paulo Justiniano11 no R Day.\r\n\r\n\r\n\r\n\r\n Como o R trabalha\r\n\r\n\r\nIniciamos a discussão por uma afirmação de John McKinley Chambers, do qual afirmou que o R tem três princípios (Chambers 2016):\r\n\r\n\r\n\r\nFigure 6: John Chambers12, o criador da linguagem S.\r\n\r\n\r\n\r\nPrincípio do Objeto: Tudo que existe em R é um objeto;\r\nPrincípio da Função: Tudo que acontece no R é uma chamada de função;\r\nPrincípio da Interface: Interfaces para outros programas são parte do R.\r\nAo longo de todo o curso, para os três módulos, iremos nos referir a esses princípios. Vamos inicialmente observar uma adaptação da ilustração feita por Paradis (2005), mostrando como o R trabalha, Figura 7.\r\n\r\n\r\n\r\nFigure 7: Esquema de como o R funciona.\r\n\r\n\r\n\r\nToda ação que acontece no R é uma chamada de função (Operadores e funções), que por sua vez é armazenada na forma de um objeto, e este se associa a um nome. A forma de execução de uma função é baseada em argumentos (dados, fórmulas, expressões, etc), que são entradas, ou argumentos padrões que já são pré-estabelecidos na criação da função. Esses tipos de argumentos podem ser modificados na execução da função. Por fim, a saída é o resultado, que é também um objeto, e pode ser usado como argumento de outras funções.\r\nNa Figura 7, observamos que todas as ações realizadas sobre os objetos ficam armazenadas na memória ativa do computador. Esses objetos são criados por comandos (teclado ou mouse) através de funções ou operadores (chamada de função), dos quais leem ou escrevem arquivo de dados do disco rígido, ou leem da própria internet. Por fim, o resultado desses objetos podem ser apresentados no console (memória ativa), exportados em formato de imagem, página web, etc. (disco rígido), ou até mesmo ser reaproveitado como argumento de outras funções, porque o resultado também é um objeto.\r\n Comandos no R e Ambiente Global\r\n\r\n\r\nConsole e Prompt de comando\r\nComo falado anteriormente, o R é uma linguagem baseada em linhas de comando, e as linhas de comando, são executadas uma de cada vez, no console. Assim que o prompt de comando está visível na tela do console, o R indica que o usuário está pronto para inserir as linhas de comando. O símbolo padrão do prompt de comando é “>,” porém ele pode ser alterado. Para isso, use a linha de comando, por exemplo:\r\n\r\n\r\noptions(prompt = \"R>\")\r\n# Toda vez que o console iniciar, começarar por 'R>'\r\n10\r\n\r\n\r\n[1] 10\r\n\r\nO conjunto de símbolos que podem ser utilizados no R depende do sistema operacional e do país em que o R está sendo executado. Basicamente, todos os símbolos alfanuméricos podem ser utilizados, mas para evitar problemas quanto ao uso das letras aos nomes, opte pelos caracteres ASCII.\r\nA escolha do nome associado a um objeto tem algumas regras:\r\nDeve consistir em letras, dígitos, . e _;\r\nOs nomes devem ser iniciado por uma letra ou um ponto não seguido de um número, isto é, Ex.: .123, 1n, dentre outros;\r\nAs letras maiúsculas se distinguem das letras minúsculas;\r\nNão pode inicia por _ ou dígito, é retornado um erro no console caso isso ocorra;\r\nNão pode usar qualquer uma das palavras reservadas pela linguagem, isto é, TRUE, FALSE, if, for, dentre outras, que pode ser consultado usando o comando ?Reserved().\r\nUm nome que não segue essas regras é chamado de um nome não sintático. Um comando que pode ser usado para converter nomes não sintatícos em nomes sintáticos é make.names.\r\n\r\n\r\n\r\nApesar dessas justificativas, algumas situações como as apresentadas nos exemplos anteriores são possíveis, ver Wickham (2019) na Seção 2.2.1\r\nComandos elementares\r\nOs comandos elementares podem ser divididos em expressões e atribuições. Por exemplo, podemos está interessados em resolver a seguinte expressão \\(10 + 15 = 25\\). No console quando passamos pelo comando:\r\n\r\n\r\n10 + 15\r\n\r\n\r\n[1] 25\r\n\r\nO R avalia essa expressão internamente e imprime o resultado na tela, após apertar o botão ENTER do teclado. Esse fato é o que ocorre no segundo princípio mencionado por Chambers (2016), tudo em R acontece por uma chamada de função. Na realidade o símbolo + é uma função interna do R, que chamamos de função primitiva, porque foi implementada em outra linguagem. Assim, essa é o resultado de três objetos (“10,” “+,” “15”) que são avaliados internamente, do qual a função + é chamada, e em seguida o resuldo é impresso no console.\r\nDo mesmo modo, se houver algum problema em algum dos objetos o retorno da avaliação pode ser uma mensagem de erro. Um caso muito prático é quando utilizamos o separador de casas decimais para os números sendo a vírgula. Quando na realidade deve ser um ponto “.” respeitando o sistema internacional de medidas. A vírgula é utilizada para separar elementos, argumentos em uma função, etc. Vejamos o exemplo:\r\n\r\n10,5 + 15,5\r\nError: <text>:1:3: ',' inesperado\r\n1: 10,\r\n      ^\r\n\r\nPorém, tem que ficar claro que uma expressão é qualquer comando repassado no console. Este comando é avaliado e seu resultado impresso, há menos que explicitamente o usuário queira torná-lo invisível13. Caso algum elemento do comando não seja reconhecido pelo R, há um retorno de alguma mensagem em forma de “erro” ou “alerta,” tentando indicar o possível problema. Todos esses processos ocorrem na memória ativa do computador, e uma vez o resultado impresso no console, o valor é perdido, há menos que você atribua essa expressão a um nome, que erroneamento usamos o termo: “criamos um objeto!” A atribuição dessa expressão será dada pela junção de dois símbolos “<-,” falado mais a frente. Um comando em forma de atribuição também avalia a sua expressão, um nome se associa ao seu resultado, e o resultado será mostrado, se posteriormente, após a execução você digitar o “nome” atribuído a esse resultado. Vejamos um exemplo:\r\n\r\n\r\n# Foi criado um objeto do tipo caractere e o nome \"meu_nome\" foi associado a ele\r\n# O 'R' avalia essa expressão, mas não imprime no console!\r\nmeu_nome <- \"Ben\"\r\n\r\n# Para imprimir o resultado da expressão, digitamos o nome \"meu_nome\" no console\r\n# e apertamos o botão ENTER do teclado!\r\nmeu_nome\r\n\r\n\r\n[1] \"Ben\"\r\n\r\nExecução dos comandos\r\nQuando inserimos um comando no console, executamos uma linha de comando por vez ou separados por “;” em uma mesma linha. Vejamos\r\n\r\n\r\n# Uma linha de comando por vez\r\nmeu_nome <- \"Ben\" # Criamos e associamos um nome ao objeto\r\nmeu_nome # Imprimos o objeto\r\n\r\n\r\n[1] \"Ben\"\r\n\r\n# Tudo em uma linha de comando\r\nmeu_nome <- \"Ben\"; meu_nome\r\n\r\n\r\n[1] \"Ben\"\r\n\r\nSe um comando for muito grande e não couber em uma linha, ou caso deseje completar um comando em mais de uma linha, após a primeira linha haverá o símbolo “+” iniciando a linha seguinte ao invés do símbolo de prompt de comando (“>”), até que o comando esteja sintaticamente completo. Vejamos:\r\n\r\n\r\n# Uma linha de comando em mais de uma linha\r\n(10 + 10) /\r\n  2\r\n\r\n\r\n[1] 10\r\n\r\nPor fim, todas linhas de comando quando iniciam pelo símbolo jogo da velha, “#” indica um comentário e essa linha de comando não é avaliada pelo console, apenas impressa na tela. E ainda, as linhas de comandos no console são limitadas a aproximadamente 4095 bytes (não caracteres).\r\nChamada e correção de comandos anteriores\r\nUma vez que um comando foi executado no console, esse comando por ser recuperado usando as teclas de setas para cima e para baixo do teclado, recuperando os comandos anteriorermente executados, e que os caracteres podem ser alterados usando as teclas esquerda e direita do teclado, removidas com o botão Delete ou Backspace do teclado, ou acrescentadas digitando os caracteres necessários. Uma outra forma de completar determinados comandos já existentes, como por exemplo, uma função que já existe nas bibliotecas de instalação do R, usando o botão Tab do teclado. O usuário começa digitando as iniciais, e para completar o nome aperta a tecla Tab. Posteriormente, basta completar a linha de comando e apertar ENTER para executá-la. Vejamos um exemplo a seguir.\r\n\r\n\r\nUsando esses recursos no RStudio são mais dinâmicos e vão mais além. Por exemplo, quando usamos um objeto do tipo função, estes apresentam o que chamamos de argumento(s) dentro do parêntese de uma função, do qual são elementos necessários, para que a função seja executada corretamente. Nesse caso, ao inseri o nome dessas funções no console, usando o RStudio, ao iniciá-la com a abertura do parêntese, abre-se uma janela informano todos os argumentos possíveis dessa função. Isso torna muito dinâmico escrever linhas de comando, porque não precisaremos estar lembrando do nome dos argumentos de uma função, mas apenas entender o objetivo dessa função. Vejamos um exemplo a seguir.\r\n\r\n\r\nAmbiente Global (ou área de trabalho, Workspace)\r\nQuando usamos um comando de atribuição no console, o R armazena o nome associado ao objeto criado na área de trabalho (Workspace), que nós chamamos de Ambiente Global. Teremos uma seção introdutória na seção Ambientes e caminhos de busca, mas entendamos inicialmente que o objetivo de um ambiente é associar um conjunto de nomes a um conjunto de valores. Por exemplo:\r\n\r\n\r\n# Nomes criados no ambiente \r\nx <- 10 - 6; y <- 10 + 4; w <- \"Maria Isabel\"\r\n# Verificando o nomes contidos no ambiente global\r\nls()\r\n\r\n\r\n[1] \"funcao\"        \"meu_nome\"      \"n\"             \"novo_ambiente\"\r\n[5] \"w\"             \"x\"             \"y\"            \r\n\r\nObserve que todos os objetos criados até o momento estão listados, e o que é mais surpreendente é que ambientes podem conter outros ambientes e até mesmo se conter. Observe o objeto meu_nome é um ambiente e está contido no Ambiente global. Será sempre dessa forma que recuperaremos um objeto criado no console do R. Caso contrário, se no console esse comando não for de atribuição esse objeto é perdido.\r\n Arquivos .Rdata e .Rhistory\r\n\r\n\r\nAo final do que falamos até agora, todo o processo ao inserir linhas de comando do console, e desejarmos finalizar os trabalhos do ambiente R, dois arquivos são criados, sob a instrução do usuário em querer aceitar ou não, um .RData e outro .Rhistory, cujas finalidades são:\r\n.RData: salvar todos os objetos criados que estão atualmente disponíveis;\r\n.Rhistory: salvar todas as linhas de comandos inseridas no console.\r\nAo iniciar o R no mesmo diretório onde esses arquivos foram salvos, é carregado toda a sua área de trabalho anteriomente, bem como o histórico das linhas de comando utilizadas anteriormente.\r\n Criando e salvando um script\r\nA melhor forma de armazenarmos nossas linhas de código inseridas no console é criando um Script. Este é um arquivo de texto com a extensão “.R.” Uma vez criada, poderemos ao final salvar o arquivo e guardá-lo para utilizar futuramente.\r\nNo R, ao ser iniciado poderemos ir no menu em Arquivo > Novo script.... Posteriormente, pode ser inserido as linhas de comando, executadas no console pela tecla de atalho F5. As janelas do Script e console possivelmente ficarão sobrepostas. Para uma melhor utilização, estas janelas podem ficar lado a lado, configurando-as no menu em Janelas > Dividir na horizontal (ou Dividir lado a lado).\r\nNo RStudio, poderemos criar um Script no menu em File > New File > R Script, ou diretamente no ícone abaixo da opção File no menu, cujo o símbolo é um arquivo com o símbolo “+” em verde, que é o ícone do New File, e escolher R Script. Esse arquivo abrirá no primeiro quadrante na interface do RStudio.\r\nPara salvar, devemos clicar no botão com o símbolo de disquete (R/RStudio), escolher o nome do arquivo e o diretório onde o arquivo será armazenado no seu computador. Algumas ressalvas devem ser feitas:\r\nEscolha sempre um nome sem caracteres especiais, com acentos, etc.;\r\nEscolha sempre um nome curto ou abreviado, que identifique a finalidade das linhas de comando escritas;\r\nEvite espaços se o nome do arquivo for composto. Para isso, use o símbolo underline “_”;\r\nQuando escrever um código, evite também escrever caracteres especiais, exceto em casos de necessidade, como imprimir um texto na tela, títulos na criação de gráficos, dentre outras. Nos referimos especificamente, nos comentários do código.\r\nUm ponto bem interessante é o diretório. Quando criamos um Script a primeira vez, e trabalhamos nele a pós a criação, muitos erros podem ser encontrados de início. Um problema clássico é a importação de dados. O usuário tem um conjunto de de dados e deseja fazer a importação para o R, porém, mesmo com todos os comandos corretos, o console retorna um erro, informando que não existe esse arquivo que contém os dados para serem informados. Isso é devido ao diretório de trabalho atual. Para verificar qual o diretório que está trabalhando no momento, use a linha de comando:\r\n\r\n\r\ngetwd()\r\n\r\n\r\n\r\nPara alterar o diretório de trabalho, o usuário deve usar a seguinte função setwd(\"Aqui, deve ser apontado para o local desejado!\"). Supomos que salvamos o nosso Script tem sido em C:\\meus_scripts_r. Assim, usamos a função setwd e ao apontarmos o local, as barras devem ser inseridas de modo invertido, isto é, setwd(\"C:/meu_scripts_r\"), além de estar entre aspas.\r\nNo RStudio, isso pode ser feito em Session > Set Working Directory > To Source File Location. Isso levará ao diretório corrente do Script. Se desejar escolher outro diretório, vá em Session > Set Working Directory > Choose Directory.... Porém, uma vez criado um Script, e utilizado novamente, se o usuário estiver abrindo o RStudio também naquele primeiro momento, por padrão, o diretório de trabalho corrente será o mesmo do diretório do Script. Isso acaba otimizando o trabalho.\r\nDevemos estar atentos também, quando trabalhamos utilizando Scripts ou arquivos de banco de dados, em locais diferentes do diretório corrente. Um outro recurso interessante é a função source(), que tem o objetivo de executar todas as linhas de comando de um Script sem precisar abri-lo. Isso pode ser útil, quando criamos funções para as nossas atividades, porém elas não se encontram no Script de trabalho para o momento. Assim, podemos criar um Script auxiliar que armazenas todas as funções criadas para as análises desejadas, e no Script corrente, poderemos chamá-las sem precisar abri o Script auxiliar. Todos os objetos passam a estar disponíveis no ambiente global.\r\n\r\nPor fim, algo de muita importância para um programador, comente suas linhas de comando. Mas faça isso a partir do primeiro dia em que você criou o seu primeiro Script. Isso criará um hábito, uma vez que o arquivo não está sendo criado apenas para um momento, mas para futuras consultas. E quando voltamos a Scripts com muitas linhas de comando, principalmente depois de algum tempo, e sem comentários, possivelmente você passará alguns instantes para tentar entender o que foi escrito.\r\nOutra coisa importante, é a boa prática de escrita de um código, e o RStudio nos proporciona algumas ferramentas interessantes. Mas isso será visto mais a frente.\r\n Objetos\r\nDefinimos um objeto como uma entidade no ambiente R com características internas contendo informações necessárias para interpretar sua estrutura e conteúdo. Essas características são chamadas de atributos. Vamos entender o termo estrutura como a disposição de como está o seu conteúdo. Por exemplo, a estrutura de um objeto mais simples no R é um vetor atômico, pois os elementos contidos nele, apresenta o mesmo modo, um tipo de atributo. Falaremos nisso, mais a frente.\r\nDe forma didática, adaptaremos a representação dos objetos no formato de diagrama.\r\nVejamos o seguinte código:\r\n\r\n\r\nx <- 10\r\n\r\n\r\n\r\nTodo mundo que tem uma certa noção sobre a linguagem R afirmaria: “criei um objeto x que recebe o valor 10.” Para Wickham (2019) essa afirmação é imprecisa e pode levar um entendimento equivocado sobre o que acontece de fato. Para o mesmo autor, o correto é afirmar que o objeto 10 está se ligando a um nome. E de fato, o objeto não tem um nome, mas o nome tem um objeto. O símbolo que associa um objeto a um nome é o de atribuição, <-, isto é, a junção do símbolo desigualdade menor e o símbolo de subtração. Para ver qual objeto associado ao nome, o usuário precisa apenas digitar o nome no console.\r\nRepresentaremos em termos de diagrama, um nome se ligando a um objeto, na Figura 8.\r\n\r\n\r\n\r\nFigure 8: Dizemos que o nome 'x' se liga ao objeto do tipo (estrutura) vetor.\r\n\r\n\r\n\r\nO identificador na memoría ativa desse objeto pode ser obritida por:\r\n\r\n\r\nlobstr::obj_addr(x)\r\n# [1] \"0xf8a104fc20\"\r\n\r\n\r\n\r\nO diagrama explica que o nome criado “x” se associou com um objeto do tipo (estrutura) vetor e modo numeric (ou também double, usando a função typeof()). Essa outra representação ficará mais claro, no segundo diagrama, Figura 9, que representa a ligação do nome “y” ao objeto.\r\nConseguem perceber que não houve a criação de um outro objeto, mas apenas a ligação de mais um nome a ele, pois o identificador na memória ativa para o objeto não alterou, é o mesmo. Logo, não temos um outro objeto, mais dois nomes que se ligam ao mesmo objeto.\r\n\r\n\r\ny <- x\r\nlobstr::obj_addr(y)\r\n\r\n\r\n[1] \"0x2b295fe8\"\r\n\r\n# [1] \"0xf8a104fc20\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nFigure 9: Dizemos que o nome 'x' se liga ao objeto do tipo (estrutura) vetor.\r\n\r\n\r\n\r\nMais especificamente, acrescentamos um outro diagrama, acrescentando a representação do ambiente global.\r\nO símbolo de atribuição poderá ser representado na direção da esquerda para à direita ou vice-versa, isto é,\r\n\r\n\r\nx <- 10\r\n10 -> x\r\n\r\n\r\n\r\nEssas duas linhas de comando anteriores pode ter passadas despercebida pelo leitor em um situação, se na segunda linha tivéssemos alterado o valor do objeto de 10 para 30, por exemplo, a associação de x seria ao objeto 30. Isso significa que se o nome já existe, ele será apagado da memória ativa do computador e associado ao novo objeto.\r\nUma outra forma menos convencional é usar o comando assign, veja:\r\n\r\n\r\nassign(\"m\", 15)\r\nm\r\n\r\n\r\n[1] 15\r\n\r\nUma forma menos convencional é utilizar o símbolo da igualdade “=” para associarmos nomes aos objetos. Contudo, discutiremos mas adiante, em Boas práticas de como escrever um código, que o uso da igualdade deverá em R ser usado apenas para a denominação de argumentos em uma função.\r\nQuando desejamos executar mais de uma linha de comando por, separamos estas pelo símbolo “;” isto é,\r\n\r\n\r\nx <- 10; w <- 15; x; w\r\n\r\n\r\n[1] 10\r\n[1] 15\r\n\r\nNeste caso, executamos quatro comandos em uma linha, associamos dois nomes a dois objetos e imprimimos os seus valores.\r\nPor questão de comodidade, iremos a partir de agora, sempre nos referir a um objeto pelo nome associado a ele, para não está sempre se se expressando como “um nome associado a um objeto.” Mas que fique claro a discussão realizada anteriormente sobre esses conceitos.\r\nNesse momento, nos limitaremos a falar sobre objetos que armazenam dados, do tipo caracteres e números.\r\nAtributos\r\nTodos os objetos, terão pelo menos dois tipos de atributos, chamados de atributos intrínsecos, sendo herdados da linguagem S. Os demais atributos, quando existem, podem ser verificados pela função attributes(). A ideia dos atributos pode ser pensada como metadados, isto é, um conjunto de informações que caracterizam o objeto. Diremos também que todos os objetos R têm classes. Agora, devemos deixar claro essa informação, apesar do R seguir o princípio do Objeto, nem tudo é orientado a objetos. A forma de se verificar a classe de um objeto é pela função class(). Contudo, os objetos internos do R (base), quando solicitado sua classe pela função class(), acabam retornando resultados equivocados. Uma alternativa é utilizar a função sloop::s3_class() do pacote sloop. Isso será discutido no módulo Programação em R (Nível Intermedirário).\r\nAtributos intrínsecos\r\nTodos os objetos tem dois atributos intrínsecos: o modo e comprimento. O modo representa a natureza dos elementos objetos. Destacamos quatro, numérico (numeric), lógico (logic), caractere14 (character) e complexo (complex). Este último, não daremos evidência para esse momento. O comprimento mede a quantidade de elementos no objeto.\r\nPara determinarmos o modo de um objeto, usamos a função mode(). Vejamos:\r\n\r\n\r\n# Objeto modo caractere\r\nx <- \"Ben\"; mode(x)\r\n\r\n\r\n[1] \"character\"\r\n\r\n# Objeto modo numerico\r\ny <- 10; mode(y)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\n# Objeto modo logico\r\nz <- TRUE; mode(z)\r\n\r\n\r\n[1] \"logical\"\r\n\r\n# Objeto modo complexo\r\nw <- 1i; mode(w)\r\n\r\n\r\n[1] \"complex\"\r\n\r\nContudo, essa função mode() se baseou nos atributos baseados na linguagem S.\r\nTemos uma outra função para verificarmos o modo do objeto que é typeof(). O atributo modo retornado de um objeto, está relacionado a tipagem de variáveis da linguagem C, uma vez que boa parte das rotinas no R está nessa linguagem, principalmente as funções do pacote base. Existem 25 tipos que serão detalhados no módulo Programação em R (Nível Intermedirário).\r\nUma tabela a seguir, mostra o retorno dos seis principais modos de um objeto (Os modos apresentados baseiam-se apenas quanto a característica dos dados do objeto. É claro que um objeto não armazena dados. Existem outras naturezas, que serão omitidas nesse momento):\r\ntypeof\r\nmode\r\nlogical\r\nlogical\r\ninteger\r\nnumeric\r\ndouble\r\nnumeric\r\ncomplex\r\ncomplex\r\ncharacter\r\ncharacter\r\nraw\r\nraw\r\nUm resumo as funções mensionadas podem ser refletidas com as seguintes indagações:\r\nbase::class() e loop::c3_class() e - Qual o tipo de objeto?\r\nbase::mode() Qual o tipo de dados baseados na linguagem S?\r\nbase::typeof() Qual o tipo de dados baseados na linguagem C?\r\nbase::attributes() O objeto tem atributos?\r\nCoersão\r\nFalar sobre a coersão realizado pelo próprio R e pelo usuário…\r\nOs modos podem ser convertidos do tipo as.<modo>(), isto é, se desejarmos que um objeto meu_objeto tenha o modo “character,” basta usar as.character(meu_objeto). Vejamos,\r\n\r\n\r\n# Objeto de modo numerico\r\nminha_idade <- 35\r\nmode(minha_idade)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\n# Coersão do objeto para modo caractere (`string`)\r\nminha_idade <- as.character(minha_idade)\r\nmode(minha_idade)\r\n\r\n\r\n[1] \"character\"\r\n\r\n\r\n\r\n\r\n\r\nChambers, John M. 2016. Extending R. The R Series. Boca Raton, Florida: Chapman; Hall/CRC.\r\n\r\n\r\nParadis, Emmanuel. 2005. “R for Beginners.” https://cran.r-project.org/doc/contrib/Paradis-rdebuts_en.pdf.\r\n\r\n\r\nWickham, Hadley. 2019. Advanced R. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://adv-r.hadley.nz/.\r\n\r\n\r\n———. 2019. Advanced R. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://adv-r.hadley.nz/.\r\n\r\n\r\nFonte das fotos: Robert Gentleman do site: https://biocasia2020.bioconductor.org/ e Ross Ihaka do site: https://www.stat.auckland.ac.nz/en/about/news-and-events-5/news/news-2017/2017/12/ross-ihaka-retires.html↩︎\r\nFontes: https://cran.r-project.org/doc/html/interface98-paper/paper_2.html e https://www.r-project.org/contributors.html↩︎\r\nFonte: https://stat.ethz.ch/pipermail/r-announce/1997/000001.html↩︎\r\nFonte: https://www.gnu.org/philosophy/free-sw.html↩︎\r\nFonte: https://www.gnu.org/philosophy/open-source-misses-the-point.html↩︎\r\nFonte: https://www.gnu.org/philosophy/open-source-misses-the-point.html↩︎\r\nhttps://cran.r-project.org/doc/html/interface98-paper/paper_1.html↩︎\r\nhttps://cran.r-project.org/doc/html/interface98-paper/paper_1.html↩︎\r\nFonte da foto: https://rstudio.com/speakers/j.j.-allaire/↩︎\r\nComprehensive R Archive Network↩︎\r\nFonte da foto: https://www.ufpr.br/portalufpr/noticias/disciplinas-transversais-para-programas-de-pos-graduacao-abrem-inscricoes-nesta-segunda-feira/↩︎\r\nFonte da foto: Retirada de sua página pessoal, https://statweb.stanford.edu/~jmc4/↩︎\r\nBasta usar a função invisible(10 + 15), que a expressão é avaliada mas não impressa↩︎\r\nsinônimo: string, cadeia de caracteres.↩︎\r\n",
      "last_modified": "2021-02-25T21:22:57-03:00"
    },
    {
      "path": "nintermediario.html",
      "title": "Programação em R (Nível Intermediário)",
      "description": "Esse módulo ...\n",
      "author": [],
      "contents": "\r\nSumário\r\nEm construção…\r\n\r\n Materiais para este módulo\r\nSlides de Aulas\r\nAula 00: Apresentação do Curso\r\nAula 01: Revisão de como o R trabalha\r\nScripts\r\nScript 00:\r\nScripts via Shiny\r\nCurso R via Shiny\r\n Apresentação do curso\r\nRevisão de como o R trabalha\r\n\r\n\r\n\r\nFigure 1: Relembrando como o R funciona.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-02-23T23:51:33-03:00"
    }
  ],
  "collections": []
}
